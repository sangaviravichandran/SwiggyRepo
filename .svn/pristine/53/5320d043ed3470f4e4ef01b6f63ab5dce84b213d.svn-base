package org.napf.execution;

import java.util.Map;

import org.napf.baseutils.ReadData;
import org.napf.baseutils.Setup;
import org.napf.scenarios.Scenarios;
import org.testng.annotations.Ignore;
import org.testng.annotations.Test;

public class NapfTestCase extends Setup {
	
	protected Scenarios scenario = new Scenarios();
	@Ignore
	@Test(priority = 0, dataProvider = "getLaungageDataReader", dataProviderClass = ReadData.class)
	public void HomepageMenuListValidation(Map<String, String> testdata) throws Exception {
		logger=extentreport.createTest(methodName+ " :"+testdata.get("Language"));
		scenario.profileMenuSelect(testdata.get("Language"));
		scenario.appmenulistValidation();
	}
	
	
	@Test(priority = 1, dataProvider = "getDataReader", dataProviderClass = ReadData.class)
	public void CreateNF(Map<String, String> testdata) throws Exception {
		logger=extentreport.createTest(methodName+ " for PA and TA :"+testdata.get("Process Name") +testdata.get("TA")+"DC:"+testdata.get("Mode"));
		log.info(testdata);
		if (testdata.get("Mode").equalsIgnoreCase("Online")) {
			scenario.profileMenuSelect(testdata.get("Language"));
			scenario.createNFWithPaTa(testdata);
			scenario.DcGenralTabFieldValidation(testdata);
			scenario.DcClosureFieldDataValidation(testdata);
			scenario.DcProductCodeDataValidation(testdata);
		}
		else {
			scenario.profileMenuSelect(testdata.get("Language"));
			scenario.openNFInvestigation(testdata);
			scenario.DcGenralTabFieldValidation(testdata);
			scenario.DcClosureFieldDataValidation(testdata);
			scenario.DcProductCodeDataValidation(testdata);
		}
	}
	
	@Ignore
	@Test(priority = 2, dataProvider = "getActivitesDataReader", dataProviderClass = ReadData.class)
	public void Activities(Map<String, String> testdata) throws Exception {
		logger=extentreport.createTest(methodName+ " for PA and TA :"+testdata.get("Process Name") +testdata.get("TA")+"DC:"+testdata.get("Mode"));
		log.info(testdata);
		if (testdata.get("Mode").equalsIgnoreCase("Online")) {
			scenario.profileMenuSelect(testdata.get("Language"));
			scenario.createNFWithPaTa(testdata);
			scenario.activitiesTab(testdata);
		}
		else {
			scenario.profileMenuSelect(testdata.get("Language"));
			scenario.openNFInvestigation(testdata);
			scenario.Screenzoomout();
			scenario.activitiesTab(testdata);
		}
	}
	
	@Ignore
	@Test(priority = 3, dataProvider = "getNotesDataReader", dataProviderClass = ReadData.class)
	public void Notes(Map<String, String> testdata) throws Exception {
		logger=extentreport.createTest(methodName+ " for PA and TA :"+testdata.get("Process Name") +testdata.get("TA")+"DC:"+testdata.get("Mode"));
			scenario.profileMenuSelect(testdata.get("Language"));
			scenario.createNFWithPaTa(testdata);
			scenario.notesTabAddEditDelete(testdata);
	}
}
