package ch.post.pf.nf.ta.execution;

import java.util.Map;

import org.testng.annotations.Test;

import ch.post.pf.nf.ta.baseutils.ReadData;
import ch.post.pf.nf.ta.baseutils.Setup;
import ch.post.pf.nf.ta.scenarios.CreateNFScenarios;

public class CreateNFTestCase extends Setup {

	protected CreateNFScenarios scenario = new CreateNFScenarios();
	

	@Test(priority = 1, dataProvider = "getDataReader", dataProviderClass = ReadData.class)
	public void createNFWithPaTa(Map<String, String> testdata) throws Exception {
		logger = parent.createNode(methodName + " for PA and TA :" + testdata.get("Process Name") + testdata.get("TA")
				+ "DC:" + testdata.get("Mode"));
		log.info(testdata.toString());
		if (testdata.get("Mode").equalsIgnoreCase("Online")) {
			scenario.profileMenuSelect(testdata.get("Language"));
			scenario.createNFWithPaTa(testdata);
		} else {
			scenario.profileMenuSelect(testdata.get("Language"));
			scenario.openNFInvestigation(testdata);
		}

	}
	
	@Test(priority = 1, dataProvider = "getDataReader", dataProviderClass = ReadData.class)
	public void CreateNFDcGenralTabFieldValidation(Map<String, String> testdata) throws Exception {
		logger = parent.createNode(methodName + " for PA and TA :" + testdata.get("Process Name") + testdata.get("TA")
				+ "DC:" + testdata.get("Mode"));
		log.info(testdata.toString());
		if (testdata.get("Mode").equalsIgnoreCase("Online")) {
			scenario.profileMenuSelect(testdata.get("Language"));
			scenario.createNFWithPaTa(testdata);
			scenario.DcGenralTabFieldValidation(testdata);
		} else {
			scenario.profileMenuSelect(testdata.get("Language"));
			scenario.openNFInvestigation(testdata);
			scenario.DcGenralTabFieldValidation(testdata);
		}

	}
	
	@Test(priority = 1, dataProvider = "getDataReader", dataProviderClass = ReadData.class)
	public void CreateNFDcClosureFieldDataValidation(Map<String, String> testdata) throws Exception {
		logger = parent.createNode(methodName + " for PA and TA :" + testdata.get("Process Name") + testdata.get("TA")
				+ "DC:" + testdata.get("Mode"));
		log.info(testdata.toString());
		if (testdata.get("Mode").equalsIgnoreCase("Online")) {
			scenario.profileMenuSelect(testdata.get("Language"));
			scenario.createNFWithPaTa(testdata);
			scenario.DcClosureFieldDataValidation(testdata);
		} else {
			scenario.profileMenuSelect(testdata.get("Language"));
			scenario.openNFInvestigation(testdata);
			scenario.DcClosureFieldDataValidation(testdata);
		}

	}
	
	@Test(priority = 1, dataProvider = "getDataReader", dataProviderClass = ReadData.class)
	public void CreateNFDcProductCodeDataValidation(Map<String, String> testdata) throws Exception {
		logger = parent.createNode(methodName + " for PA and TA :" + testdata.get("Process Name") + testdata.get("TA")
				+ "DC:" + testdata.get("Mode"));
		log.info(testdata.toString());
		if (testdata.get("Mode").equalsIgnoreCase("Online")) {
			scenario.profileMenuSelect(testdata.get("Language"));
			scenario.createNFWithPaTa(testdata);
			scenario.DcProductCodeDataValidation(testdata);
		} else {
			scenario.profileMenuSelect(testdata.get("Language"));
			scenario.openNFInvestigation(testdata);
			scenario.DcProductCodeDataValidation(testdata);
		}

	}

}