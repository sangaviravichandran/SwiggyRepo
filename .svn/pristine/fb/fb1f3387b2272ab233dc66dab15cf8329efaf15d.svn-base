package ch.post.pf.nf.ta.scenarios;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertTrue;

import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.Collections;
import java.util.Currency;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.devtools.v85.page.Page.SetWebLifecycleStateState;
import org.slf4j.Logger;
import org.testng.Assert;

import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.model.Log;

import ch.post.pf.nf.ta.baseutils.CommonUtils;
import ch.post.pf.nf.ta.baseutils.Log4jUtil;
import ch.post.pf.nf.ta.baseutils.ReadData;
import ch.post.pf.nf.ta.baseutils.Setup;
import ch.post.pf.nf.ta.dao.DAOTest;
import ch.post.pf.nf.ta.pagefactory.NAPFLocators;

public class CreateNFScenarios extends Setup {

	Logger log = Log4jUtil.loadLogger(CreateNFScenarios.class);
	CommonUtils commonUtils = new CommonUtils();

	/*
	 * Selecting the appropriate langue from profile menu
	 * 
	 */
	public void profileMenuSelect(String Language) throws Exception {
		log.info("select the Appropriate languge for execution: " + Language);
		DAOTest daoTest = new DAOTest();
		commonUtils.waitTime(2000);
		boolean appLanguage = daoTest.appLanguage();
		Assert.assertTrue(appLanguage, "Profile icon is not present");
		boolean langugeselect = daoTest.langugeselect(Language);
		Assert.assertTrue(langugeselect, "Langugae given is not present in the profile menu");
	}
	
	/*
	 * Creating a online NF investigation from WEB using the PA and TA and reading
	 * the NF number created...
	 */

	public void createNFWithPaTa(Map<String, String> testdata) throws Exception {
		log.info("create Investigation And check The Field Based on PA :" + testdata.get("Process Name") + " TA :"
				+ testdata.get("TA"));
		DAOTest daoTest = new DAOTest();
		commonUtils.waitTime(2000);
		boolean createInvestigation = daoTest.CreateInvestigation();
		assertTrue(createInvestigation, "unable to create investigation");
		boolean selectPATADD = daoTest.selectPATADD(testdata.get("Process Name"), testdata.get("TA"));
		assertTrue(selectPATADD, "both Pa and Ta were not selected");
		boolean saveButton = daoTest.saveButton();
		commonUtils.waitTime(10000);
		assertTrue(saveButton, "The investigation save is not done");
	}

	/*
	 * opening the NF investigation
	 * 
	 */

	public void openNFInvestigation(Map<String, String> testdata) throws IOException, Exception {
		logger.log(Status.INFO, "Opening the Nf id of DC : " + testdata.get("Mode"));
		DAOTest daoTest = new DAOTest();
		boolean openNf = daoTest.openNf(ReadData.getTestProperty(testdata.get("Mode")));
		assertTrue(openNf, "The NF page could not be found.");
		daoTest.constructOpenNfAndLoad(testdata.get("Mode"));
	}


	/*
	 * Validating general tab field for all new and old investigation
	 * 
	 */
	public String readNFNumber = null;

	public void DcGenralTabFieldValidation(Map<String, String> testdata) throws InterruptedException, Exception {
		DAOTest daoTest = new DAOTest();
		logger.log(Status.INFO, "Validating the general tab Field of " + testdata.get("Mode") + " DC");
		readNFNumber = daoTest.readNFNumber();
		log.info("the Nf number for the created investigation is : " + readNFNumber);
		if (!testdata.get("Mode").equalsIgnoreCase("Online")) {
			List<String> fieldValidationOnOpenNF = daoTest.fieldValidationOnOpenNF(testdata.get("Mode"));
			Collections.sort(fieldValidationOnOpenNF);
			List<String> readFiledNameFromSheet = daoTest.readFiledNameFromSheet(testdata.get("Mode"));
			Collections.sort(readFiledNameFromSheet);
			assertEquals(fieldValidationOnOpenNF, readFiledNameFromSheet, "All fields are not present in General Tab");
			log.info("All field are present in general tab");
			logger.log(Status.INFO, "All field are present in " + testdata.get("Mode") + " DC");
		} else {
			List<String> browserFieldValidation = daoTest.fieldValidation(testdata.get("Mode"));
			Collections.sort(browserFieldValidation);
			List<String> readFiledNameFromSheet = daoTest.readFiledNameFromSheet(testdata.get("Mode"));
			Collections.sort(readFiledNameFromSheet);
			assertEquals(browserFieldValidation, readFiledNameFromSheet, "All fields are not present in General Tab");
			log.info("All field are present in general tab");
			logger.log(Status.INFO, "All field are present in " + testdata.get("Mode") + " DC");
		}
	}

	/*
	 * Validating general tab closure data between repository and web page for all
	 * new and old investigation
	 * 
	 */
	public void DcClosureFieldDataValidation(Map<String, String> testdata) throws Exception {
		DAOTest daoTest = new DAOTest();
		logger.log(Status.INFO,
				"Validating the Closure data for Pa : " + testdata.get("Process Name") + " Ta : " + testdata.get("TA"));
		Set<String> readclosureNameFromPATA = daoTest.readFiledNameFromPATA(testdata.get("Closure reason"),
				"Closure reason");
		log.info(readclosureNameFromPATA.toString());
		commonUtils.waitTime(3000);
		Set<String> closureValuesValidation = daoTest.closureValuesValidation(readclosureNameFromPATA.size(),
				testdata.get("Mode"));
		log.info(closureValuesValidation.toString());
		assertEquals(readclosureNameFromPATA, closureValuesValidation,
				"both the repository and webpage closure data are not same");
	}

	/*
	 * Validating general tab product code data between repository and web page for
	 * all new and old investigation
	 * 
	 */

	public void DcProductCodeDataValidation(Map<String, String> testdata) throws Exception {
		DAOTest daoTest = new DAOTest();

		logger.log(Status.INFO,
				"Validating the Product data for Pa : " + testdata.get("Process Name") + " Ta : " + testdata.get("TA"));
		Set<String> readproductNameFromPATA = daoTest.readFiledNameFromPATA(testdata.get("Product code"),
				"Product code");
		log.info(readproductNameFromPATA.toString());
		commonUtils.waitTime(3000);
		Set<String> productValuesValidation = daoTest.productValuesValidation(readproductNameFromPATA.size(),
				testdata.get("Mode"));
		log.info(productValuesValidation.toString());

		assertEquals(readproductNameFromPATA, productValuesValidation,
				"both the repository and webpage product data are not same");
	}

}
