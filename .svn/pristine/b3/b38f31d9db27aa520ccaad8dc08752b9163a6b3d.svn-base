package org.napf.baseutils;

import static org.testng.Assert.assertTrue;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Set;

import org.apache.commons.io.FileUtils;
import org.apache.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.aventstack.extentreports.Status;

public class CommonUtils extends Setup {

	static Logger log = Logger.getLogger(CommonUtils.class);

	public static WebDriverWait driverWait() {
		WebDriverWait explicitWait = new WebDriverWait(driver, 120);
		return explicitWait;
	}

	public boolean isElementPresent(WebElement ele) {
		try {
			driverWait().until(ExpectedConditions.visibilityOf(ele));
		} catch (Exception e) {
			return false;
		}
		return true;
	}

	public WebElement jsElementFinder(String query) {
		WebElement element=null;
		try {
		log.info("finding the element via JavaScript query :"+query);
		JavascriptExecutor js = (JavascriptExecutor)driver;
		element=(WebElement) js.executeScript(query);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			assertTrue(false);
		}
		return element;
	}

	public String switchToWindow(int windowid) {
		try {
			Set<String> windowHandles = driver.getWindowHandles();
			log.info("current window id : " + driver.getWindowHandle());
			List<String> li = new ArrayList<String>();
			li.addAll(windowHandles);
			driver.switchTo().window(li.get(windowid));
			log.info("switched window id : " + driver.getWindowHandle());
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			assertTrue(false);
		}

		return driver.getWindowHandle();

	}

	public boolean click(WebElement locator) throws Exception {
		boolean blnVal = false;
		try {
			driverWait().until(ExpectedConditions.elementToBeClickable(locator));
			if (locator.isDisplayed()) {
				locator.click();
				log.info("Clicked on element: " + locator);
				blnVal = true;
			}

		} catch (Exception e) {
			log.error("Unable to click on element: " + locator);
			logger.log(Status.ERROR, "Unable to click on element: " + locator);
			e.printStackTrace();
			assertTrue(blnVal);
			throw (e);
		}
		return blnVal;
	}

	public boolean type(WebElement locator, String message, String strData) throws Exception {
		boolean blnVal = false;
		try {
			driverWait().until(ExpectedConditions.elementToBeClickable(locator));
			if (locator.isDisplayed()) {
				if (locator.getText() != null || !locator.getText().equalsIgnoreCase("")) {
					locator.clear();
				}
				locator.sendKeys(strData);
				log.info("Text entered in the textbox is: " + strData);
				logger.log(Status.INFO, message + strData);
				blnVal = true;

			}
		} catch (RuntimeException localRuntimeException) {
			log.error("Unable to Enter the value in the Textbox :" + locator);
			logger.log(Status.ERROR, "Unable to Enter the value in the Textbox :" + locator);
			assertTrue(false);
			throw (localRuntimeException);
		}
		return blnVal;

	}

	public boolean JSClick(WebElement locator) throws Exception {
		boolean flag = false;
		try {
			driverWait().until(ExpectedConditions.elementToBeClickable(locator));
			if (locator.isDisplayed()) {
				JavascriptExecutor executor = (JavascriptExecutor) driver;
				executor.executeScript("arguments[0].click();", locator);
				log.info("Clicked on the element using Javascript: " + locator);
				flag = true;
			}
		} catch (Exception e) {
			log.error("Error in clicking on the element using Javascript: " + locator);
			getScreenhot(driver, "locator not found");
			logger.log(Status.ERROR, "Error in clicking on the element using Javascript: " + locator);
			e.printStackTrace();
			assertTrue(flag);
			throw (e);

		}
		return flag;

	}

	public void scrollintoView() {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,600)");
	}
	
	public void scrolloutView() {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0,-600)");
	}

	public WebElement expandRootElement(WebElement element) {
		WebElement ele = null;
		try {
			boolean elementPresent = isElementPresent(element);
				ele = (WebElement) ((JavascriptExecutor) driver).executeScript("return arguments[0].shadowRoot", element);
				log.info("Ready to navigate to ShadowRoot element:" + element);
		} catch (Exception e) {
			log.error("Unable to navigate the shadow root element : " + element);
			logger.log(Status.ERROR, "Unable to navigate the shadow root element : " + element);
			e.printStackTrace();
			assertTrue(false);
			throw (e);
		}
		return ele;
	}

	public static String getScreenhot(WebDriver driver, String screenshotName) throws Exception {
		String dateName = new SimpleDateFormat("yyyyMMddhhmmss").format(new Date());
		TakesScreenshot ts = (TakesScreenshot) driver;
		File source = ts.getScreenshotAs(OutputType.FILE);
		// after execution, you could see a folder "FailedTestsScreenshots" under target
		String destination = System.getProperty("user.dir") + "/target/FailedTestsScreenshots/" + screenshotName + dateName
				+ ".png";
		File finalDestination = new File(destination);
		FileUtils.copyFile(source, finalDestination);
		return destination;
	}

	public void tab() throws AWTException {
		Robot r = new Robot();
		r.keyPress(KeyEvent.VK_TAB);
		r.keyRelease(KeyEvent.VK_TAB);
	}

	public void ctrlTab() throws AWTException {
		Robot r = new Robot();
		r.keyPress(KeyEvent.VK_CONTROL);
		r.keyPress(KeyEvent.VK_TAB);
		r.keyRelease(KeyEvent.VK_TAB);
		r.keyRelease(KeyEvent.VK_CONTROL);
	}

	public void downenter() throws AWTException {
		Robot r = new Robot();
		r.keyPress(KeyEvent.VK_DOWN);
		r.keyRelease(KeyEvent.VK_DOWN);
		r.keyPress(KeyEvent.VK_ENTER);
		r.keyRelease(KeyEvent.VK_ENTER);
	}

	public WebElement dropdownSelectionViaShadowRoot(WebElement shawdowroot6, String css) {
		WebElement element = null;
		try {
			WebElement ele7 = shawdowroot6.findElement(By.tagName("vaadin-combo-box"));
			WebElement shawdowroot7 = expandRootElement(ele7);
			WebElement ele8 = shawdowroot7.findElement(By.tagName("vaadin-text-field"));
			WebElement shawdowroot8 = expandRootElement(ele8);
			element = shawdowroot8.findElement(By.cssSelector(css));
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			assertTrue(false);
		}

		return element;
	}
	
	
	
	public void waitTime(int time) throws Exception {
		Thread.sleep(time);
	}
	
	public void selectAllClean() throws AWTException {
		Robot r = new Robot();
		r.keyPress(KeyEvent.VK_CONTROL);
		r.keyPress(KeyEvent.VK_A);
		r.keyRelease(KeyEvent.VK_A);
		r.keyRelease(KeyEvent.VK_CONTROL);
		r.keyPress(KeyEvent.VK_BACK_SPACE);
		r.keyRelease(KeyEvent.VK_BACK_SPACE);
		tab();
	}
}
