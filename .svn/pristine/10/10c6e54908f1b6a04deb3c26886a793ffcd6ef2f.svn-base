package org.napf.scenarios;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertTrue;

import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.napf.baseutils.CommonUtils;
import org.napf.baseutils.Log4jUtil;
import org.napf.baseutils.ReadData;
import org.napf.baseutils.Setup;
import org.napf.dao.DAOTest;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebElement;
import org.slf4j.Logger;
import org.testng.Assert;

import com.aventstack.extentreports.Status;

public class Scenarios extends Setup {

	Logger log = Log4jUtil.loadLogger(Scenarios.class);
	CommonUtils commonUtils = new CommonUtils();

	/*
	 * Validating all app menu list in home page
	 * 
	 */
	public void appmenulistValidation() throws Exception {
		log.info("check the app menu list is found in the page with open NF field");
		logger.log(Status.INFO, "check the app menu list is found in the page with open-NF field");
		DAOTest daoTest = new DAOTest();
		commonUtils.waitTime(2000);
		boolean appMenuList = daoTest.appMenuList();
		boolean open_NF_input_field = daoTest.open_NF_input_field();
		if (appMenuList) {
			assertTrue(appMenuList, "App Menulist is not found in the page");
			logger.log(Status.INFO, "App Menu list is found");
		} else {
			assertTrue(false);
			logger.log(Status.ERROR, "App Menu list is not found");
		}
		if (open_NF_input_field) {
			Assert.assertTrue(open_NF_input_field, "Open_NF field is not found");
			logger.log(Status.INFO, "Open-Nf field is found");
		} else {
			assertTrue(false);
			logger.log(Status.ERROR, "Open-Nf field is not found");
		}
	}

	/*
	 * Selecting the appropriate langue from profile menu
	 * 
	 */

	public void profileMenuSelect(String Language) throws Exception {
		log.info("select the Appropriate languge for execution: " + Language);
		DAOTest daoTest = new DAOTest();
		commonUtils.waitTime(2000);
		boolean appLanguage = daoTest.appLanguage();
		Assert.assertTrue(appLanguage, "Profile icon is not present");
		boolean langugeselect = daoTest.langugeselect(Language);
		Assert.assertTrue(langugeselect, "Langugae given is not present in the profile menu");
	}

	/*
	 * Creating a online NF investigation from WEB using the PA and TA and reading
	 * the NF number created...
	 */

	public void createNFWithPaTa(Map<String, String> testdata) throws Exception {
		log.info("create Investigation And check The Field Based on PA :" + testdata.get("Process Name") + " TA :"
				+ testdata.get("TA"));
		DAOTest daoTest = new DAOTest();
		commonUtils.waitTime(2000);
		boolean createInvestigation = daoTest.CreateInvestigation();
		assertTrue(createInvestigation, "unable to create investigation");
		boolean selectPATADD = daoTest.selectPATADD(testdata.get("Process Name"), testdata.get("TA"));
		assertTrue(selectPATADD, "both Pa and Ta were not selected");
		boolean saveButton = daoTest.saveButton();
		commonUtils.waitTime(10000);
		assertTrue(saveButton, "The investigation save is not done");
		}

	/*
	 * opening the NF investigation
	 * 
	 */

	public void openNFInvestigation(Map<String, String> testdata) throws IOException, Exception {
		logger.log(Status.INFO, "Opening the Nf id of DC : " + testdata.get("Mode"));
		DAOTest daoTest = new DAOTest();
		boolean openNf = daoTest.openNf(ReadData.getTestProperty(testdata.get("Mode")));
		assertTrue(openNf, "The NF page could not be found.");
		daoTest.constructOpenNfAndLoad(testdata.get("Mode"));
	}

	/*
	 * Verify the activities tab data is present .
	 * 
	 */

	public void activitiesTab(Map<String, String> testdata) throws Exception {
		DAOTest daoTest = new DAOTest();
		commonUtils.waitTime(4000);
		daoTest.editorMenuSelect(testdata.get("menutab"));
		Map<String, String> activityTableData = daoTest.ActivityTableData();
		log.info("Recent Activity table data" + activityTableData);
	}

	/*
	 * Validating the notes tab menu by adding a notes editing the notes deleting
	 * the notes
	 * 
	 */

	public void notesTabAddEditDelete(Map<String, String> testdata) throws Exception {
		DAOTest daoTest = new DAOTest();
		
		commonUtils.waitTime(4000);
		daoTest.editorMenuSelect(testdata.get("notesTab"));
		daoTest.notesAdd();
		daoTest.notesEditDeleteFunction();
		
	}

	/*
	 * Validating general tab field for all new and old investigation
	 * 
	 */
	public String readNFNumber=null;
	public void DcGenralTabFieldValidation(Map<String, String> testdata) throws InterruptedException, Exception {
		DAOTest daoTest = new DAOTest();
		logger.log(Status.INFO, "Validating the general tab Field of " + testdata.get("Mode") + " DC");
		readNFNumber= daoTest.readNFNumber();
		log.info("the Nf number for the created investigation is : " + readNFNumber);
		if (!testdata.get("Mode").equalsIgnoreCase("Online")) {
			List<String> fieldValidationOnOpenNF = daoTest.fieldValidationOnOpenNF(testdata.get("Mode"));
			Collections.sort(fieldValidationOnOpenNF);
			List<String> readFiledNameFromSheet = daoTest.readFiledNameFromSheet(testdata.get("Mode"));
			Collections.sort(readFiledNameFromSheet);
			assertEquals(fieldValidationOnOpenNF, readFiledNameFromSheet, "All fields are not present in General Tab");
			log.info("All field are present in general tab");
			logger.log(Status.INFO, "All field are present in " + testdata.get("Mode") + " DC");
		} else {
			List<String> browserFieldValidation = daoTest.fieldValidation(testdata.get("Mode"));
			Collections.sort(browserFieldValidation);
			List<String> readFiledNameFromSheet = daoTest.readFiledNameFromSheet(testdata.get("Mode"));
			Collections.sort(readFiledNameFromSheet);
			assertEquals(browserFieldValidation, readFiledNameFromSheet, "All fields are not present in General Tab");
			log.info("All field are present in general tab");
			logger.log(Status.INFO, "All field are present in " + testdata.get("Mode") + " DC");
		}
	}

	/*
	 * Validating general tab closure data between repository and web page for all
	 * new and old investigation
	 * 
	 */
	public void DcClosureFieldDataValidation(Map<String, String> testdata) throws Exception {
		DAOTest daoTest = new DAOTest();
		logger.log(Status.INFO,
				"Validating the Closure data for Pa : " + testdata.get("Process Name") + " Ta : " + testdata.get("TA"));
		Set<String> readclosureNameFromPATA = daoTest.readFiledNameFromPATA(testdata.get("Closure reason"),
				"Closure reason");
		log.info(readclosureNameFromPATA.toString());
		commonUtils.waitTime(3000);
		Set<String> closureValuesValidation = daoTest.closureValuesValidation(readclosureNameFromPATA.size(),
				testdata.get("Mode"));
		log.info(closureValuesValidation.toString());
		assertEquals(readclosureNameFromPATA, closureValuesValidation,
				"both the repository and webpage closure data are not same");
	}

	/*
	 * Validating general tab product code data between repository and web page for
	 * all new and old investigation
	 * 
	 */

	public void DcProductCodeDataValidation(Map<String, String> testdata) throws Exception {
		DAOTest daoTest = new DAOTest();

		logger.log(Status.INFO,
				"Validating the Product data for Pa : " + testdata.get("Process Name") + " Ta : " + testdata.get("TA"));
		Set<String> readproductNameFromPATA = daoTest.readFiledNameFromPATA(testdata.get("Product code"),
				"Product code");
		log.info(readproductNameFromPATA.toString());
		commonUtils.waitTime(3000);
		Set<String> productValuesValidation = daoTest.productValuesValidation(readproductNameFromPATA.size(),
				testdata.get("Mode"));
		log.info(productValuesValidation.toString());

		assertEquals(readproductNameFromPATA, productValuesValidation,
				"both the repository and webpage product data are not same");
	}

	/*
	 * method used to zoom out the driver for 80%
	 * 
	 
	public void Screenzoomout() throws Exception {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("document.body.style.zoom='75'");
		Thread.sleep(5000);
	}
	public void Screenzoomout() throws Exception {
		Robot r = new Robot();
		for (int i = 0; i < 2; i++) {
			r.keyPress(KeyEvent.VK_CONTROL);
			r.keyPress(KeyEvent.VK_SUBTRACT);
			r.keyRelease(KeyEvent.VK_SUBTRACT);
			r.keyRelease(KeyEvent.VK_CONTROL);
		}
	}
*/
	/*
	 * method to valdiate all product tab field for both online 
	 * and other DC channel
	 * 
	 */
	public void ProductTabFieldValidation(Map<String, String> testdata) throws Exception {
		DAOTest daoTest = new DAOTest();
		logger.log(Status.INFO,
				"Validating the product tab field for Pa : " + testdata.get("Process Name") + " Ta : " + testdata.get("TA"));
		daoTest.editorMenuSelect(testdata.get("Menu"));
		List<String> productTabWebPageFields = daoTest.fieldValidation(testdata.get("Mode"));
		Set<String> productTabReposirotyData = daoTest.readFiledNameFromPATA(testdata.get("Fields"),"Prodcut tab");
		assertEquals(productTabWebPageFields, productTabReposirotyData,"Both the repository and Webpage data field are not same in product tab");
		
	}
	
	public void userInboxFieldValidation() throws Exception {
		DAOTest daoTest = new DAOTest();
		logger.log(Status.INFO,
				"Validating theuser inbox fields");
		daoTest.AppMenuSelection(ReadData.getTestProperty("userMenu"));
		daoTest.column_field_sorting_validation();
		boolean userInboxGroupElementCheck = daoTest.userInboxGroupElementCheck();
		if (userInboxGroupElementCheck) {
			assertEquals(userInboxGroupElementCheck,true,"The group element are in enabled status");
		}
		else {
			assertEquals(userInboxGroupElementCheck,false,"The group element are in disabled status");
		}
	}
	
	public void userInboxNFsearchAndGroupcheck() throws Exception{
		DAOTest daoTest = new DAOTest();
		String readNFNumber2 = daoTest.readNFNumber();
		logger.log(Status.INFO,
				"searching the NF-number created :" +readNFNumber2);
		commonUtils.loadURL();
		commonUtils.waitTime(3000);
		WebElement nfsearchInUserInbox = daoTest.NfsearchInUserInbox(readNFNumber2.replaceAll("NF | ", ""),"search");
		boolean userInboxGroupElementCheck = daoTest.userInboxGroupElementCheck();
		if (!userInboxGroupElementCheck) {
			assertTrue(true,"The group element are in disabled status");
		}
		else {
			assertTrue(false,"The group element are in enabled status");
		}
	}
	public void userInboxNFsearchAndopenCreateMess(String NFId) throws Exception{
		DAOTest daoTest = new DAOTest();
		logger.log(Status.INFO,
				"Searching and opening the NF id: "+NFId );
		boolean open_Searched_NF = daoTest.open_Searched_NF(NFId,"");
		assertTrue(open_Searched_NF,"Unable to iopen the Searched NF");
		boolean createMessTab = daoTest.CreateMessTab("Create a new mess");
		assertTrue(createMessTab,"Create mess is not working as execpted");
	}

	public void userGroupNavigate(Map<String, String> testdata) throws Exception {
		DAOTest daoTest = new DAOTest();
		String readNFNumber2 = daoTest.readNFNumber();
		logger.log(Status.INFO,
				"searching the NF-number created :" +readNFNumber2);
		commonUtils.loadURL();
		commonUtils.waitTime(3000);
		WebElement nfsearchInUserInbox = daoTest.NfsearchInUserInbox(readNFNumber2.replaceAll("NF | ", ""),"search");
		boolean userInboxGroupElementCheck = daoTest.userInboxGroupElementCheck();
		if (!userInboxGroupElementCheck) {
			assertTrue(true,"The group element are in disabled status");
		}
		else {
			assertTrue(false,"The group element are in enabled status");
		}
		daoTest.seelctGroupOption(testdata.get("Group"));
		daoTest.appMenuList(testdata.get("appmenu"));
		log.info("Searching the NF moved to "+testdata.get("Group"));
		logger.log(Status.INFO,
				"Searching the NF moved to "+testdata.get("Group"));
		daoTest.groupQueueSummary(testdata.get("Groupsummary"));
		driver.get(ReadData.getTestProperty("groupsummaryUrl"));
		commonUtils.waitTime(3000);
		WebElement nfsearchIngroupsummary = daoTest.NfsearchInUserInbox(readNFNumber2.replaceAll("NF | ", ""),"");
		String replaceAll = readNFNumber2.replaceAll("NF | ", "");
		String NFIdserach = replaceAll.replace("|", "");
		System.out.println(NFIdserach);
		System.out.println(daoTest.searchedCreatedNF);
		assertEquals(NFIdserach, daoTest.searchedCreatedNF,"The Nf id moved to "+testdata.get("Group")+"is not found.");
	}
	
	public void OnHoldreminder(Map<String, String> testdata) throws Exception {
		// TODO Auto-generated method stub
		DAOTest daoTest = new DAOTest();
		logger.log(Status.INFO,
				"Validating On Hold Reminder tab");
		daoTest.editorMenuSelect(testdata.get("notesTab"));
		
	}
	
	
}
