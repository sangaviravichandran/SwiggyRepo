package ch.post.pf.nf.ta.execution;

import static org.testng.Assert.assertTrue;

import java.util.Map;

import org.testng.SkipException;
import org.testng.annotations.Test;

import com.aventstack.extentreports.Status;

import ch.post.pf.nf.ta.baseutils.CommonUtils;
import ch.post.pf.nf.ta.baseutils.ReadData;
import ch.post.pf.nf.ta.baseutils.Setup;
import ch.post.pf.nf.ta.dao.DAOTest;
import ch.post.pf.nf.ta.scenarios.CreateNFScenarios;
import ch.post.pf.nf.ta.scenarios.NotesTabScenarios;

public class NotesTabTestCase extends Setup {

	protected NotesTabScenarios scenario = new NotesTabScenarios();
	protected CreateNFScenarios cfScenario = new CreateNFScenarios();
	protected CommonUtils commonutils = new CommonUtils();
	protected DAOTest daoTest = new DAOTest();

	/* This Testcase help on Adding the notes in editor menu notes tab */

	@Test(priority = 0, dataProvider = "getNotesDataReader", dataProviderClass = ReadData.class,groups= {"regression"})
	public void notesTabAdd(Map<String, String> testdata) throws Exception {
		try {
			if (testdata.get("CanExecute").equalsIgnoreCase("yes")) {
				commonutils.waitTime(2000);
				log.info("***************** START TEST *****************");
				commonutils.NAPFBrowserLaunch();
				logger = parent.createNode(methodName + " for PA and TA :" + testdata.get("Process Name")
						+ testdata.get("TA") + "DC:" + testdata.get("Mode"));
				if (testdata.get("Headers").equalsIgnoreCase("Online")) {
					cfScenario.profileMenuSelect(testdata.get("Language"));
					cfScenario.createNFWithPaTa(testdata);
					scenario.notesTabAdd(testdata);
				} else {
					daoTest.searchAndMovetoUserinbox(testdata.get("Language"), testdata.get("Menu 1"),
							testdata.get("NFID"));
					scenario.notesTabAdd(testdata);
				}
			} else {
				logger = parent.createNode(methodName + testdata.get("Menu 1"));
				throw new SkipException(methodName);
			}
		} catch (NullPointerException e) { // TODO: handle exception logger = parent.createNode(methodName + "CanExecute
											// check");
			logger.log(Status.FAIL, "canexecute Field is manditory should be updated as yes /no");
			assertTrue(false);
		}
	}

	/* This Testcase help on Editng the notes in editor menu notes tab */

	@Test(priority = 1, dataProvider = "getNotesDataReader", dataProviderClass = ReadData.class,groups= {"regression"})
	public void notesTabEdit(Map<String, String> testdata) throws Exception {
		try {
			if (testdata.get("CanExecute").equalsIgnoreCase("yes")) {
				CommonUtils.waitTime(2000);
				log.info("***************** START TEST *****************");
				commonutils.NAPFBrowserLaunch();
				logger = parent.createNode(methodName + " for PA and TA :" + testdata.get("Process Name")
						+ testdata.get("TA") + "DC:" + testdata.get("Mode"));
				if (testdata.get("Headers").equalsIgnoreCase("Online")) {
					cfScenario.profileMenuSelect(testdata.get("Language"));
					cfScenario.createNFWithPaTa(testdata);
					scenario.notesTabAdd(testdata);
					commonutils.waitTime(3000);
					scenario.notesTabEdit(testdata);
				} else {
					daoTest.searchAndMovetoUserinbox(testdata.get("Language"), testdata.get("Menu 1"),
							testdata.get("NFID"));
					scenario.notesTabAdd(testdata);
					commonutils.waitTime(3000);
					scenario.notesTabEdit(testdata);
				}
			} else {
				logger = parent.createNode(methodName + testdata.get("Menu 1"));
				throw new SkipException(methodName);
			}
		} catch (NullPointerException e) {
			// TODO: handle exception
			logger = parent.createNode(methodName + "CanExecute check");
			logger.log(Status.FAIL, "canexecute Field is manditory should be updated as yes /no");
			assertTrue(false);
		}
	}

	/* This Testcase help on Deleting the notes in editor menu notes tab */

	@Test(priority = 2, dataProvider = "getNotesDataReader", dataProviderClass = ReadData.class,groups= {"regression"})
	public void notesTabDelete(Map<String, String> testdata) throws Exception {
		try {
			if (testdata.get("CanExecute").equalsIgnoreCase("yes")) {
				CommonUtils.waitTime(2000);
				log.info("***************** START TEST *****************");
				commonutils.NAPFBrowserLaunch();
				logger = parent.createNode(methodName + " for PA and TA :" + testdata.get("Process Name")
						+ testdata.get("TA") + "DC:" + testdata.get("Mode"));
				if (testdata.get("Headers").equalsIgnoreCase("Online")) {
					cfScenario.profileMenuSelect(testdata.get("Language"));
					cfScenario.createNFWithPaTa(testdata);
					scenario.notesTabAdd(testdata);
					commonutils.waitTime(3000);
					scenario.notesTabDelete(testdata);
				} else {
					daoTest.searchAndMovetoUserinbox(testdata.get("Language"), testdata.get("Menu 1"),
							testdata.get("NFID"));
					scenario.notesTabAdd(testdata);
					commonutils.waitTime(3000);
					scenario.notesTabDelete(testdata);
				}
			} else {
				logger = parent.createNode(methodName + testdata.get("Menu 1"));
				throw new SkipException(methodName);
			}
		} catch (NullPointerException e) {
			// TODO: handle exception
			logger = parent.createNode(methodName + "CanExecute check");
			logger.log(Status.FAIL, "canexecute Field is manditory should be updated as yes /no");
			assertTrue(false);
		}
	}
}