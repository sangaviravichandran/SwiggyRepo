package ch.post.pf.nf.ta.baseutils;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.poi.ss.usermodel.RichTextString;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.slf4j.Logger;
import org.testng.annotations.DataProvider;

public class ReadData {

	static Logger log = Log4jUtil.loadLogger(ReadData.class);

	public static String getProperty(String keyName) throws Exception, IOException 
	{
		InputStream s1 = TestAutomationApp.class.getResourceAsStream("/config.properties");
		Properties prod = new Properties();
		prod.load(s1);

		String data = prod.getProperty(keyName);

		log.info("data read from config file is :" + keyName + ": " + data);
		return data;

	}

	public static String getTestProperty(String keyName) throws Exception, IOException {
		InputStream s1 = TestAutomationApp.class.getResourceAsStream("/TestConfig.properties");
		Properties prod = new Properties();
		prod.load(s1);

		String data = prod.getProperty(keyName);

		log.info("data read from config file is :" + keyName + ": " + data);
		return data;
	}

	@DataProvider(name = "getDataReader", parallel = false)
	public Object[][] getCSVData() throws Exception {
		Object[][] obj = readDataFromExcel("./src/test/resources/TestData/PATA.xlsx", "PATA");
		return obj;
	}

	@DataProvider(name = "getLaungageDataReader", parallel = false)
	public Object[][] getLanguageData() throws Exception {
		Object[][] obj = readDataFromExcel("./src/test/resources/ExcelManipulationAdvanced/TestCases.xls", "GroupMenu");
		return obj;

	}

	@DataProvider(name = "getAssignInvestigation", parallel = false)
	public Object[][] getAssignInvestigationData() throws Exception {
		Object[][] obj = readDataFromExcel("./src/test/resources/ExcelManipulationAdvanced/TestCases.xls",
				"AssignInvestigation");
		return obj;

	}

	@DataProvider(name = "getNotesDataReader", parallel = false)
	public Object[][] getNotesData() throws Exception {
		Object[][] obj = readDataFromExcel("./src/test/resources/ExcelManipulationAdvanced/TestCases.xls", "Notes");
		return obj;
	}

	@DataProvider(name = "getActivitesDataReader", parallel = false)
	public Object[][] getActivitesData() throws Exception {
		Object[][] obj = readDataFromExcel("./src/test/resources/ExcelManipulationAdvanced/TestCases.xls", "Activites");
		return obj;
	}

	@DataProvider(name = "getUserInboxGroupNavigateDataReader", parallel = false)
	public Object[][] UserInboxGroupNavigate() throws Exception {
		Object[][] obj = readDataFromExcel("./src/test/resources/ExcelManipulationAdvanced/TestCases.xls",
				"UserInboxGroupNavigate");
		return obj;
	}

	@DataProvider(name = "getUserInboxGroupDataReader", parallel = false)
	public Object[][] UserInboxGroup() throws Exception {
		Object[][] obj = readDataFromExcel("./src/test/resources/ExcelManipulationAdvanced/TestCases.xls",
				"UserInboxGroup");
		return obj;
	}

	@DataProvider(name = "getSearchInvestigation", parallel = false)
	public Object[][] SearchInvestigation() throws Exception {
		Object[][] obj = readDataFromExcel("./src/test/resources/ExcelManipulationAdvanced/TestCases.xls",
				"SearchInvestigation");
		return obj;
	}

	@DataProvider(name = "getSearchInvestigationField", parallel = false)
	public Object[][] SearchInvestigation_field() throws Exception {
		Object[][] obj = readDataFromExcel("./src/test/resources/TestData/MasterFile.xlsx", "SearchInvestigation_field");
		return obj;
	}
	
	@DataProvider(name = "getUserInboxGroupfield", parallel = false)
	public Object[][] UserInboxGroup_field() throws Exception {
		Object[][] obj = readDataFromExcel("./src/test/resources/ExcelManipulationAdvanced/TestCases.xls", "UserInboxGroup");
		return obj;
	}
	
	@DataProvider(name = "getpartnerAddress", parallel = false)
	public Object[][] PartnerAddress() throws Exception {
		Object[][] obj = readDataFromExcel("./src/test/resources/ExcelManipulationAdvanced/TestCases.xls",
				"PartnerAddress");
		return obj;
	}

	@DataProvider(name = "getAttachment", parallel = false)
	public Object[][] Attachmentvalidation() throws Exception {
		Object[][] obj = readDataFromExcel("./src/test/resources/ExcelManipulationAdvanced/TestCases.xls",
				"Attachment");
		return obj;
	}

	public static Object[][] readDataFromExcel(String path, String sheetName) throws Exception {
		Object[][] obj = null;
		List<Map<String, String>> li = new ArrayList<Map<String, String>>();
		int objincr = 0;
		File f = new File(path);
		FileInputStream fi;
		Workbook wb;
		if (path.contains(".xlsx")) {
			fi = new FileInputStream(f);
			wb = new XSSFWorkbook(fi);
		} else {
			fi = new FileInputStream(f);
			wb = new HSSFWorkbook(fi);
		}
		Sheet sh = wb.getSheet(sheetName);
		log.info("Reading data from a sheet: " + sheetName);
		int physicalNumberOfRows = sh.getPhysicalNumberOfRows();
		Row Header = sh.getRow(0);
		for (int i = 1; i < physicalNumberOfRows; i++) {
			Row row = sh.getRow(i);
			int physicalNumberOfCells = row.getPhysicalNumberOfCells();
			Map<String, String> ma = new HashMap<String, String>();
			for (int j = 0; j < physicalNumberOfCells; j++) {
				Cell cell = row.getCell(j);
				@SuppressWarnings("deprecation")
				CellType cellType = cell.getCellType();
				switch (cellType) {
				case STRING:
					RichTextString stringCellValue = cell.getRichStringCellValue();
					RichTextString headerName = Header.getCell(j).getRichStringCellValue();
					ma.put(headerName.toString().trim(), stringCellValue.toString().trim());
					break;
				case NUMERIC:
					if (DateUtil.isCellDateFormatted(cell)) {
						Date dateCellValue = cell.getDateCellValue();
						SimpleDateFormat s = new SimpleDateFormat("MM/dd/yyyy");
						String format = s.format(dateCellValue);
						String headerName1 = Header.getCell(j).getStringCellValue().trim();
						ma.put(headerName1, format);
					} else {
						double numericCellValue = cell.getNumericCellValue();

						String valueOf = String.valueOf(numericCellValue);
						String headerName2 = Header.getCell(j).getStringCellValue().trim();
						ma.put(headerName2, valueOf);
					}
					break;
				}
			}
			li.add(ma);
		}
		if (li.size() != 0) {
			obj = new Object[li.size()][1];
			for (Map<String, String> entry : li) {
				obj[objincr][0] = entry;
				objincr++;
			}
		}
		return obj;
	}

	public static Map<String, String> readDataField(String sheetName) throws Exception {
		File f = new File("./src/test/resources/TestData/MasterFile.xlsx");
		FileInputStream fi = new FileInputStream(f);
		Workbook wb = new XSSFWorkbook(fi);
		Sheet sh = wb.getSheet(sheetName);
		log.info("Reading data from a sheet: " + sheetName);
		int physicalNumberOfRows = sh.getPhysicalNumberOfRows();
		Row Header = sh.getRow(0);
		Map<String, String> ma = new HashMap<String, String>();
		for (int i = 1; i < physicalNumberOfRows; i++) {
			Row row = sh.getRow(i);
			int physicalNumberOfCells = row.getPhysicalNumberOfCells();
			for (int j = 0; j < physicalNumberOfCells; j++) {
				Cell cell = row.getCell(j);
				CellType cellType = cell.getCellType();
				switch (cellType) {
				case STRING:
					RichTextString stringCellValue = cell.getRichStringCellValue();
					RichTextString headerName = Header.getCell(j).getRichStringCellValue();
					ma.put(headerName.toString().trim(), stringCellValue.toString().trim());
					break;
				case NUMERIC:
					if (DateUtil.isCellDateFormatted(cell)) {
						Date dateCellValue = cell.getDateCellValue();
						SimpleDateFormat s = new SimpleDateFormat("MM/dd/yyyy");
						String format = s.format(dateCellValue);
						String headerName1 = Header.getCell(j).getStringCellValue().trim();
						ma.put(headerName1, format);
					} else {
						double numericCellValue = cell.getNumericCellValue();
						long l = (long) numericCellValue;
						String valueOf = String.valueOf(l);
						String headerName2 = Header.getCell(j).getStringCellValue().trim();
						ma.put(headerName2, valueOf);
					}
					break;
				}
			}
		}
		return ma;
	}

}
