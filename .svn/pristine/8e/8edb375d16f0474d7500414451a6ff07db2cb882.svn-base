package ch.post.pf.nf.ta.scenarios;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertTrue;

import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.Collections;
import java.util.Currency;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.devtools.v85.page.Page.SetWebLifecycleStateState;
import org.slf4j.Logger;
import org.testng.Assert;

import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.model.Log;

import ch.post.pf.nf.ta.baseutils.CommonUtils;
import ch.post.pf.nf.ta.baseutils.Log4jUtil;
import ch.post.pf.nf.ta.baseutils.ReadData;
import ch.post.pf.nf.ta.baseutils.Setup;
import ch.post.pf.nf.ta.dao.DAOTest;
import ch.post.pf.nf.ta.pagefactory.NAPFLocators;

public class ProductTabValidationScenarios extends Setup {

	Logger log = Log4jUtil.loadLogger(ProductTabValidationScenarios.class);
	CommonUtils commonUtils = new CommonUtils();


	/*
	 * method to valdiate all product tab field for both online and other DC channel
	 * 
	 */
	public void ProductTabFieldValidation(Map<String, String> testdata) throws Exception {
		DAOTest daoTest = new DAOTest();
		logger.log(Status.INFO, "Validating the product tab field for Pa : " + testdata.get("Process Name") + " Ta : "
				+ testdata.get("TA"));
		daoTest.editorMenuSelect(testdata.get("Menu"));
		List<String> productTabWebPageFields = daoTest.fieldValidation(testdata.get("Mode"));
		Set<String> productTabReposirotyData = daoTest.readFiledNameFromPATA(testdata.get("Fields"), "Prodcut tab");
		assertEquals(productTabWebPageFields, productTabReposirotyData,
				"Both the repository and Webpage data field are not same in product tab");

	}
	
}
